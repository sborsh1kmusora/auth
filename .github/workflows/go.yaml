name: Auth CI/CD

on:
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: "cr.selcloud.ru/chat"
  IMAGE_NAME: "auth"
  CONTAINER_NAME: "auth-container"
  NETWORK_NAME: "chat_network"
  POSTGRES_CONTAINER: "pg"

jobs:
  build-and-test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Build
        run: go build -o ./bin/ -v ./...

      - name: Test
        run: go test -v ./...

  linter:
    runs-on: ubuntu-22.04
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'

      - name: Cache golangci-lint cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-${{ hashFiles('.golangci.pipeline.yaml') }}
          restore-keys: |
            ${{ runner.os }}-golangci-

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.5.0
          args: --timeout=30m --config=./.golangci.pipeline.yaml

#  image-build-and-push:
#    runs-on: ubuntu-22.04
#    needs: linter
#    steps:
#      - name: Checkout main
#        uses: actions/checkout@v4
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Cache Docker layers
#        uses: actions/cache@v4
#        with:
#          path: /tmp/.buildx-cache
#          key: ${{ runner.os }}-buildx-${{ github.sha }}
#          restore-keys: |
#            ${{ runner.os }}-buildx-
#
#      - name: Login to Docker Registry
#        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin $REGISTRY
#
#      - name: Build and Push Docker Image
#        run: |
#          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
#          docker buildx create --use
#          docker buildx build \
#            --cache-from type=local,src=/tmp/.buildx-cache \
#            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
#            --push --tag $REGISTRY/$IMAGE_NAME:$TAG_NAME .
#
#          docker buildx build \
#            --cache-from type=local,src=/tmp/.buildx-cache \
#            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
#            --push --tag $REGISTRY/migrator:$TAG_NAME -f migration.Dockerfile .
#
#      - name: Move new cache
#        run: |
#          rm -rf /tmp/.buildx-cache
#          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
#
#  deploy-infrastructure:
#    runs-on: ubuntu-22.04
#    needs: image-build-and-push
#    steps:
#      - name: Ensure network and Postgres exist
#        uses: appleboy/ssh-action@v1.0.0
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SSH_USERNAME }}
#          key: ${{ secrets.SSH_KEY }}
#          envs: NETWORK_NAME,POSTGRES_CONTAINER
#          script: |
#            echo "Creating network if not exists..."
#            docker network inspect $NETWORK_NAME >/dev/null 2>&1 || docker network create $NETWORK_NAME
#
#            echo "Ensuring PostgreSQL is running..."
#            if [ "$(docker ps -aq -f name=$POSTGRES_CONTAINER)" ]; then
#              docker start $POSTGRES_CONTAINER
#            else
#              docker run -d \
#                --name $POSTGRES_CONTAINER \
#                --network $NETWORK_NAME \
#                --restart unless-stopped \
#                --env-file .env \
#                -e POSTGRES_USER=${{ secrets.PG_USER }} \
#                -e POSTGRES_PASSWORD=${{ secrets.PG_PASSWORD }} \
#                -e POSTGRES_DB=${{ secrets.PG_DATABASE }} \
#                -v auth_postgres_data:/var/lib/postgresql/data \
#                postgres:15-alpine3.22
#            fi
#
#  run-migrations:
#    runs-on: ubuntu-22.04
#    needs: deploy-infrastructure
#    steps:
#      - name: Run migrations on server
#        uses: appleboy/ssh-action@v1.0.0
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SSH_USERNAME }}
#          key: ${{ secrets.SSH_KEY }}
#          envs: REGISTRY,GITHUB_SHA,NETWORK_NAME,POSTGRES_CONTAINER
#          script: |
#            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
#
#            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY
#
#            echo "Waiting for PostgreSQL to be ready..."
#            docker exec $POSTGRES_CONTAINER sh -c 'until pg_isready -U ${{ secrets.PG_USER }}; do sleep 2; done'
#
#            echo "Running migrations..."
#            docker run --rm \
#              --network $NETWORK_NAME \
#              --env-file .env \
#              $REGISTRY/migrator:$TAG_NAME
#
#  deploy-image:
#    runs-on: ubuntu-latest
#    needs: run-migrations
#    steps:
#      - name: Deploy to Selectel Cloud
#        uses: appleboy/ssh-action@v1.0.0
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SSH_USERNAME }}
#          key: ${{ secrets.SSH_KEY }}
#          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME,NETWORK_NAME
#          script: |
#            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
#
#            echo "Logging into registry..."
#            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY
#
#            echo "Pulling latest image..."
#            docker pull $REGISTRY/$IMAGE_NAME:$TAG_NAME
#
#            echo "Stopping old container..."
#            docker stop $CONTAINER_NAME || true
#            docker rm $CONTAINER_NAME || true
#
#            echo "Running new container..."
#            docker run -d \
#                --name $CONTAINER_NAME \
#                --network $NETWORK_NAME \
#                --restart unless-stopped \
#                --env-file .env \
#                -p 50051:50051 \
#                $REGISTRY/$IMAGE_NAME:$TAG_NAME